/*
科目：ソフトウェア演習Ⅰa
学籍番号・氏名：B201809・大野　裕之
課題番号：課題4-1
提出日：2022年5月23日
使用Cコンパイラ：gcc version 9.2.0
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 128

//木構造
typedef struct BinaryTree { 
    char word[MAX];
    int count; 
    struct BinaryTree *left;
    struct BinaryTree *right;
}BT;

//二分木生成とカウント
int MakeTree(BT *node,char *word){
    int comp = strcmp(node->word,word);
    //文字のカウント
    if(comp == 0){
        node->count += 1;
    }else{
        if(comp>0){
            if(node->right == NULL){
                BT *new_node=(BT*)malloc(sizeof(BT));
                if(new_node == NULL){
                    printf("ERORR");
                }
                strcpy(new_node->word,word);
                new_node->count = 1;
                new_node->left = NULL;
                new_node->right = NULL;
                node->right = new_node;
            }else{
                MakeTree(node->right,word);
            }
        }else{
            if(node->left == NULL){
                BT *new_node=(BT*)malloc(sizeof(BT));
                if(new_node == NULL){
                    printf("ERORR");
                }
                strcpy(new_node->word,word);
                new_node->count = 1;
                new_node->left = NULL;
                new_node->right = NULL;
                node->left = new_node;
            }else{
                MakeTree(node->left,word);
            }
        }
    }
}

//二分木の結果を表示
int PrintTree(BT *tree){
    if(tree!=NULL){
        PrintTree(tree->right);
        printf("WORD:\"%s\",COUNT: %d\n",tree->word,tree->count);
        PrintTree(tree->left);
    }
}
//メモリ解放
void FreeTree(BT *tree){
    if(tree->right != NULL){
        FreeTree(tree->right);
        free(tree->right);
    }
    if(tree->left!=NULL){
        FreeTree(tree->left);
        free(tree->left);
    }
}

int main(void){

    FILE *fp;     //FILE型構造体
    //テキストファイル
    char fname[] = "Alice_in_Wonderland.txt";
    char word[MAX];    //格納する文字
    
    //ファイルを開く．例外処理で，失敗ならNULLを返す．
    fp = fopen(fname,"r");
    if(fp == NULL) {
		printf("%s file not open!\n", fname);
		return -1;
    }
    
    //根を生成
    BT *root = (BT*)malloc(sizeof(BT));
    fscanf(fp,"%s",root->word);
    root->count = 1;
    root->left = NULL;
    root->right = NULL;

    //1単語ずつ読み取り
    while(fscanf(fp,"%s",word)!=EOF){
        MakeTree(root,word);
    }

    //表示
    PrintTree(root);
    //メモリの解放
    FreeTree(root);
    free(root);


  //ファイルを閉じる
  fclose(fp);
}

/*
実行結果
PS C:\Users\ono_0\Documents\B3\前期\ソフトウェア演習\No.4> gcc report0401.c -o report0401
PS C:\Users\ono_0\Documents\B3\前期\ソフトウェア演習\No.4> ./report0401 > out.txt
WORD:""'TIS",COUNT: 1
WORD:""--SAID",COUNT: 1
WORD:""Come",COUNT: 1
WORD:""Coming",COUNT: 1
WORD:""Edwin",COUNT: 1
WORD:""French,",COUNT: 1
WORD:""HOW",COUNT: 1
WORD:""He's",COUNT: 1
WORD:""How",COUNT: 1
WORD:""I",COUNT: 8
WORD:""I'll",COUNT: 2
WORD:""Keep",COUNT: 1
WORD:""Let",COUNT: 1
WORD:""Such",COUNT: 1
WORD:""THEY",COUNT: 1
WORD:""There",COUNT: 2
WORD:""There's",COUNT: 1
WORD:""Too",COUNT: 1
WORD:""Turtle",COUNT: 1
WORD:""Twinkle,",COUNT: 1
略
WORD:"you,'",COUNT: 6
WORD:"you--all",COUNT: 1
WORD:"you--are",COUNT: 1
WORD:"you.",COUNT: 1
WORD:"you.'",COUNT: 1
WORD:"you:",COUNT: 1
WORD:"you?",COUNT: 2
WORD:"you?'",COUNT: 7
WORD:"young",COUNT: 5
WORD:"your",COUNT: 53
WORD:"yours",COUNT: 1
WORD:"yours."'",COUNT: 1
WORD:"yourself",COUNT: 5
WORD:"yourself!'",COUNT: 1
WORD:"yourself,",COUNT: 1
WORD:"yourself,'",COUNT: 1
WORD:"yourself.'",COUNT: 2
WORD:"youth,",COUNT: 3
WORD:"youth,'",COUNT: 3
WORD:"zigzag,",COUNT: 1
*/